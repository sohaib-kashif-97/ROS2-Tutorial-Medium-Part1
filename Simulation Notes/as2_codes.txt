-------------------------------------------------------------
Script 1: Basic Node Setup
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node

class BasicNode(Node):
    def __init__(self):
        super().__init__('basic_node')
        self.get_logger().info("Basic AeroStack 2 Node has started!")

def main(args=None):
    rclpy.init(args=args)
    node = BasicNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    


-------------------------------------------------------------
Script 2: Launching a Simulated Drone
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class DroneLauncher(Node):
    def __init__(self):
        super().__init__('drone_launcher')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.get_logger().info("Drone simulation interface initialized!")

def main(args=None):
    rclpy.init(args=args)
    node = DroneLauncher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    

-------------------------------------------------------------
Script 3: Arming a Drone
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class ArmDrone(Node):
    def __init__(self):
        super().__init__('arm_drone')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.get_logger().info("Drone armed!")

def main(args=None):
    rclpy.init(args=args)
    node = ArmDrone()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    

-------------------------------------------------------------
Script 4: Takeoff
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class TakeoffDrone(Node):
    def __init__(self):
        super().__init__('takeoff_drone')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.drone.takeoff(height=1.0, speed=0.5)
        self.get_logger().info("Drone taking off to 1 meter!")

def main(args=None):
    rclpy.init(args=args)
    node = TakeoffDrone()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    

-------------------------------------------------------------
Script 5: Landing
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class LandDrone(Node):
    def __init__(self):
        super().__init__('land_drone')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.land(speed=0.3)
        self.get_logger().info("Drone landing!")

def main(args=None):
    rclpy.init(args=args)
    node = LandDrone()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
        


-------------------------------------------------------------
Script 6: Subscribing to Pose Data
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped

class PoseSubscriber(Node):
    def __init__(self):
        super().__init__('pose_subscriber')
        self.subscription = self.create_subscription(
            PoseStamped,
            '/drone_sim_0/pose',
            self.pose_callback,
            10)
        self.get_logger().info("Subscribed to drone pose!")

    def pose_callback(self, msg):
        self.get_logger().info(f"Position: x={msg.pose.position.x:.2f}, y={msg.pose.position.y:.2f}, z={msg.pose.position.z:.2f}")

def main(args=None):
    rclpy.init(args=args)
    node = PoseSubscriber()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    


-------------------------------------------------------------
Script 7: Move to Destination
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface
from as2_msgs.msg import BehaviorStatus

class BehaviorNode(Node):
    def __init__(self):
        super().__init__('behavior_node')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.drone.takeoff(height=1.0, speed=0.5)
        self.drone.activate_behavior("go_to_behavior", {"x": 2.0, "y": 2.0, "z": 1.0})
        self.get_logger().info("Activated GoTo behavior!")

def main(args=None):
    rclpy.init(args=args)
    node = BehaviorNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

class GoToDrone(Node):
    def __init__(self):
        super().__init__('goto_drone')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.drone.takeoff(height=1.0, speed=0.5)
        self.drone.go_to(x=2.0, y=2.0, z=1.0, speed=0.5)
        self.get_logger().info("Drone moving to (2, 2, 1)!")

def main(args=None):
    rclpy.init(args=args)
    node = GoToDrone()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    


-------------------------------------------------------------
Script 8: Setting Speed
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class SpeedDrone(Node):
    def __init__(self):
        super().__init__('speed_drone')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.drone.takeoff(height=1.0, speed=0.5)
        self.drone.set_speed(x=0.5, y=0.0, z=0.0)
        self.get_logger().info("Drone moving forward at 0.5 m/s!")

def main(args=None):
    rclpy.init(args=args)
    node = SpeedDrone()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    
    
-------------------------------------------------------------
Script 9: Following a Path
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class PathDrone(Node):
    def __init__(self):
        super().__init__('path_drone')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.drone.takeoff(height=1.0, speed=0.5)
        waypoints = [(1.0, 1.0, 1.0), (2.0, 2.0, 1.0), (0.0, 0.0, 1.0)]
        self.drone.follow_path(waypoints, speed=0.5)
        self.get_logger().info("Drone following waypoints!")

def main(args=None):
    rclpy.init(args=args)
    node = PathDrone()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    


-------------------------------------------------------------
Script 10: Reading Battery Status
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import BatteryState

class BatteryMonitor(Node):
    def __init__(self):
        super().__init__('battery_monitor')
        self.subscription = self.create_subscription(
            BatteryState,
            '/drone_sim_0/battery',
            self.battery_callback,
            10)
        self.get_logger().info("Monitoring battery status!")

    def battery_callback(self, msg):
        self.get_logger().info(f"Battery: {msg.percentage * 100:.2f}%")

def main(args=None):
    rclpy.init(args=args)
    node = BatteryMonitor()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    
    
-------------------------------------------------------------
Script 11: Emergency Stop
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class EmergencyStop(Node):
    def __init__(self):
        super().__init__('emergency_stop')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.emergency_stop()
        self.get_logger().info("Emergency stop triggered!")

def main(args=None):
    rclpy.init(args=args)
    node = EmergencyStop()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    
    
-------------------------------------------------------------
Script 12: Switching Control Mode
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface

class ModeSwitch(Node):
    def __init__(self):
        super().__init__('mode_switch')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.set_control_mode("SPEED")					#'SPEED' or 'POSITION'
        self.get_logger().info("Switched to SPEED control mode!")

def main(args=None):
    rclpy.init(args=args)
    node = ModeSwitch()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    
    
    
-------------------------------------------------------------
Script 13: Publishing a Custom Command
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import TwistStamped

class VelocityPublisher(Node):
    def __init__(self):
        super().__init__('velocity_publisher')
        self.publisher = self.create_publisher(TwistStamped, '/drone_sim_0/cmd_vel', 10)
        timer_period = 0.1  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.get_logger().info("Publishing velocity commands!")

    def timer_callback(self):
        msg = TwistStamped()
        msg.twist.linear.x = 0.5  # Move forward
        self.publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = VelocityPublisher()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
    


-------------------------------------------------------------
Script 14: Basic Behaviour Activation
-------------------------------------------------------------

#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from as2_python_api.drone_interface import DroneInterface
from as2_msgs.msg import BehaviorStatus

class BehaviorNode(Node):
    def __init__(self):
        super().__init__('behavior_node')
        self.drone = DroneInterface(drone_id="drone_sim_0", verbose=True)
        self.drone.arm()
        self.drone.takeoff(height=1.0, speed=0.5)
        self.drone.activate_behavior("go_to_behavior", {"x": 2.0, "y": 2.0, "z": 1.0})
        self.get_logger().info("Activated GoTo behavior!")

def main(args=None):
    rclpy.init(args=args)
    node = BehaviorNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
